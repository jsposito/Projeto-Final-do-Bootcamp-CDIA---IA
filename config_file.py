#!/usr/bin/env python3
"""
Arquivo de Configura√ß√£o do Sistema de Manuten√ß√£o Preditiva
Centraliza todas as configura√ß√µes do projeto
"""

import os
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Any

@dataclass
class ConfiguracaoProjeto:
    """Classe de configura√ß√£o centralizada"""
    
    # Informa√ß√µes do Projeto
    NOME_PROJETO: str = "Sistema de Manuten√ß√£o Preditiva"
    VERSAO: str = "1.0.0"
    AUTOR: str = "Bootcamp CDIA"
    DATA_CRIACAO: str = "Setembro 2025"
    
    # Caminhos de Dados
    CAMINHO_DADOS_TREINO: str = "data/bootcamp_train.csv"
    CAMINHO_DADOS_TESTE: str = "data/bootcamp_test.csv"
    CAMINHO_SUBMISSION: str = "outputs/submission.csv"
    CAMINHO_MODELO: str = "models/modelo_otimizado.pkl"
    CAMINHO_METRICAS: str = "outputs/metricas.json"
    
    # Diret√≥rios
    DIR_DADOS: str = "data"
    DIR_MODELOS: str = "models"
    DIR_OUTPUTS: str = "outputs"
    DIR_VISUALIZACOES: str = "visualizations"
    DIR_NOTEBOOKS: str = "notebooks"
    
    # Features do Modelo
    FEATURES: List[str] = None
    FEATURES_NUMERICAS: List[str] = None
    FEATURES_CATEGORICAS: List[str] = None
    COLUNAS_TARGET: List[str] = None
    
    # Par√¢metros do Modelo
    RANDOM_STATE: int = 42
    TEST_SIZE: float = 0.2
    CV_FOLDS: int = 3
    N_JOBS: int = -1
    
    # Grid de Hiperpar√¢metros
    PARAM_GRID: Dict[str, List] = None
    
    # Configura√ß√µes da API
    API_HOST: str = "0.0.0.0"
    API_PORT: int = 8000
    API_RELOAD: bool = True
    
    # Configura√ß√µes do Jupyter
    JUPYTER_PORT: int = 8888
    JUPYTER_HOST: str = "0.0.0.0"
    
    def __post_init__(self):
        """Inicializar configura√ß√µes ap√≥s cria√ß√£o da inst√¢ncia"""
        
        # Definir features
        self.FEATURES = [
            'tipo', 'temperatura_ar', 'temperatura_processo', 
            'velocidade_rotacional', 'torque', 'desgaste_da_ferramenta'
        ]
        
        self.FEATURES_NUMERICAS = [
            'temperatura_ar', 'temperatura_processo', 
            'velocidade_rotacional', 'torque', 'desgaste_da_ferramenta'
        ]
        
        self.FEATURES_CATEGORICAS = ['tipo']
        
        self.COLUNAS_TARGET = [
            'FDF (Falha Desgaste Ferramenta)',
            'FDC (Falha Dissipacao Calor)',
            'FP (Falha Potencia)',
            'FTE (Falha Tensao Excessiva)',
            'FA (Falha Aleatoria)'
        ]
        
        # Grid de hiperpar√¢metros
        self.PARAM_GRID = {
            'classifier__estimator__n_estimators': [100, 150, 200],
            'classifier__estimator__max_depth': [10, 20, 30],
            'classifier__estimator__min_samples_leaf': [5, 10, 15],
            'classifier__estimator__min_samples_split': [10, 20],
            'classifier__estimator__max_features': ['sqrt', 'log2']
        }
        
        # Criar diret√≥rios se n√£o existirem
        self._criar_diretorios()
    
    def _criar_diretorios(self):
        """Criar diret√≥rios necess√°rios"""
        diretorios = [
            self.DIR_DADOS, self.DIR_MODELOS, 
            self.DIR_OUTPUTS, self.DIR_VISUALIZACOES, self.DIR_NOTEBOOKS
        ]
        
        for diretorio in diretorios:
            Path(diretorio).mkdir(exist_ok=True)
    
    def validar_ambiente(self) -> Dict[str, bool]:
        """Validar se o ambiente est√° configurado corretamente"""
        validacoes = {
            'dados_treino_existe': os.path.exists(self.CAMINHO_DADOS_TREINO),
            'dados_teste_existe': os.path.exists(self.CAMINHO_DADOS_TESTE),
            'modelo_existe': os.path.exists(self.CAMINHO_MODELO),
            'dir_dados_existe': os.path.exists(self.DIR_DADOS),
            'dir_modelos_existe': os.path.exists(self.DIR_MODELOS),
            'dir_outputs_existe': os.path.exists(self.DIR_OUTPUTS)
        }
        
        return validacoes
    
    def imprimir_configuracao(self):
        """Imprimir configura√ß√£o atual"""
        print(f"üìã {self.NOME_PROJETO} v{self.VERSAO}")
        print(f"üë§ {self.AUTOR} - {self.DATA_CRIACAO}")
        print("-" * 50)
        
        print("üìÅ Caminhos:")
        print(f"  Treino: {self.CAMINHO_DADOS_TREINO}")
        print(f"  Teste:  {self.CAMINHO_DADOS_TESTE}")
        print(f"  Modelo: {self.CAMINHO_MODELO}")
        
        print(f"\nüéØ Features ({len(self.FEATURES)}):")
        for feature in self.FEATURES:
            print(f"  - {feature}")
        
        print(f"\nüéØ Targets ({len(self.COLUNAS_TARGET)}):")
        for target in self.COLUNAS_TARGET:
            print(f"  - {target}")
        
        print(f"\n‚öôÔ∏è Par√¢metros:")
        print(f"  Random State: {self.RANDOM_STATE}")
        print(f"  Test Size: {self.TEST_SIZE}")
        print(f"  CV Folds: {self.CV_FOLDS}")


# Configura√ß√µes espec√≠ficas para diferentes ambientes
class ConfiguracaoDesenvolvimento(ConfiguracaoProjeto):
    """Configura√ß√£o para ambiente de desenvolvimento"""
    
    def __post_init__(self):
        super().__post_init__()
        self.API_RELOAD = True
        
        # Grid menor para desenvolvimento r√°pido
        self.PARAM_GRID = {
            'classifier__estimator__n_estimators': [50, 100],
            'classifier__estimator__max_depth': [10, 20],
            'classifier__estimator__min_samples_leaf': [5, 10]
        }


class ConfiguracaoProducao(ConfiguracaoProjeto):
    """Configura√ß√£o para ambiente de produ√ß√£o"""
    
    def __post_init__(self):
        super().__post_init__()
        self.API_RELOAD = False
        
        # Grid mais extenso para produ√ß√£o
        self.PARAM_GRID = {
            'classifier__estimator__n_estimators': [100, 150, 200, 250],
            'classifier__estimator__max_depth': [10, 20, 30, None],
            'classifier__estimator__min_samples_leaf': [1, 5, 10, 15],
            'classifier__estimator__min_samples_split': [2, 10, 20],
            'classifier__estimator__max_features': ['sqrt', 'log2', None]
        }


# Factory para obter configura√ß√£o baseada no ambiente
def obter_configuracao(ambiente: str = None) -> ConfiguracaoProjeto:
    """Obter configura√ß√£o baseada no ambiente"""
    
    if ambiente is None:
        ambiente = os.getenv('AMBIENTE', 'desenvolvimento')
    
    if ambiente.lower() == 'producao':
        return ConfiguracaoProducao()
    else:
        return ConfiguracaoDesenvolvimento()


# Inst√¢ncia global da configura√ß√£o
config = obter_configuracao()

# Fun√ß√µes utilit√°rias
def imprimir_status_ambiente():
    """Imprimir status do ambiente atual"""
    config.imprimir_configuracao()
    
    print("\nüîç Valida√ß√£o do Ambiente:")
    validacoes = config.validar_ambiente()
    
    for nome, status in validacoes.items():
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"  {emoji} {nome.replace('_', ' ').title()}")


def obter_variaveis_ambiente() -> Dict[str, Any]:
    """Obter vari√°veis de ambiente para Docker"""
    return {
        'PROJECT_NAME': config.NOME_PROJETO,
        'VERSION': config.VERSAO,
        'JUPYTER_PORT': config.JUPYTER_PORT,
        'API_PORT': config.API_PORT,
        'RANDOM_STATE': config.RANDOM_STATE,
        'MODEL_PATH': config.CAMINHO_MODELO,
        'TRAIN_DATA_PATH': config.CAMINHO_DADOS_TREINO,
        'TEST_DATA_PATH': config.CAMINHO_DADOS_TESTE
    }


if __name__ == "__main__":
    print("üîß Configura√ß√£o do Sistema de Manuten√ß√£o Preditiva")
    print("=" * 55)
    imprimir_status_ambiente()